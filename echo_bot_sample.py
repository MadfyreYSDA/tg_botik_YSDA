import logging
import sqlite3
import asyncio
import json
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
KINOPOISK_API_KEY = os.getenv("KINOPOISK_API_KEY")

import scrappers

from collections import Counter
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardButton, CallbackQuery, FSInputFile

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7594309613:AAEDXWlCMTQOqbV-KUDhaMLJQnabWyypd7w"
KINOPOISK_API_KEY = "NMRNMKK-1AQM21W-J8K5CDS-6K2GRF2"

if not BOT_TOKEN or not KINOPOISK_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BOT_TOKEN –∏ KINOPOISK_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

router = Router()
dp.include_router(router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_connection = sqlite3.connect("cinema_bot.db")
db_cursor = db_connection.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
db_cursor.execute("""
    CREATE TABLE IF NOT EXISTS history (
        user_id INTEGER,
        query TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
""")

db_cursor.execute("""
    CREATE TABLE IF NOT EXISTS stats (
        title TEXT PRIMARY KEY,
        count INTEGER DEFAULT 0
    )
""")

db_cursor.execute("""
    CREATE TABLE IF NOT EXISTS movies (
        movie_id INTEGER PRIMARY KEY,
        name TEXT,
        title TEXT,
        description TEXT,
        year INTEGER,
        country TEXT,
        genres TEXT,
        poster TEXT,
        link TEXT,
        rating_industry REAL,
        rating_people REAL
    )
""")

db_cursor.execute("""
    CREATE TABLE IF NOT EXISTS searches (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        search_name TEXT UNIQUE,
        movie_ids TEXT
    )
""")

db_connection.commit()


def format_movie_info(movie: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    name = movie.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    description_film = movie.get("description", "")
    year = movie.get("year", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    country = movie.get("country", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    genres = movie.get("genres", "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∂–∞–Ω—Ä")
    rating_industry = movie.get("rating_industry", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
    rating_people = movie.get("rating_people", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
    link = movie.get("link", "–°—Å—ã–ª–∫–∞ —É–º–µ—Ä–ª–∞")

    description_res = f"üé¨ *{name}* ({year})\n" \
                  f"üåê –°—Ç—Ä–∞–Ω–∞: {country}\n" \
                  f"üé• –ñ–∞–Ω—Ä—ã: {genres}\n" \
                  f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞: {rating_industry}/10\n" \
                  f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ IMDb: {rating_people}/10\n" \
                  f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description_film}\n\n" \
                  f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å]({link})"
    return description_res


@dp.message(Command("start"))
async def start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π ELITE KINCHIK 228 ‚Äì —Ç–≤–æ–π –∫–∏–Ω–æ–±–æ–º–±–∞—Ä–¥–∏—Ä –ø—Ä—è–º–æ –≤ Telegram! "
        "–ò—â–∏ –ª—é–±—ã–µ —Ñ–∏–ª—å–º—ã –Ω–∞ —Ä–∞–∑-–¥–≤–∞ –∏ –Ω–µ –ø–∞—Ä—å—Å—è —Å –ø–æ–∏—Å–∫–æ–º."
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    """
    await message.reply(
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª—å–º–æ–≤."
    )

@dp.message(Command("history"))
async def history_command(message: types.Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    db_cursor.execute(
        "SELECT query, timestamp FROM history WHERE user_id = ? ORDER BY timestamp DESC",
        (user_id,)
    )
    rows = db_cursor.fetchall()
    if rows:
        history = "\n".join([f"{row[0]} (–∑–∞–ø—Ä–æ—Å –æ—Ç {row[1]})" for row in rows])
        await message.reply(f"–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n{history}")
    else:
        await message.reply("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.")


@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ñ–∏–ª—å–º–æ–≤ –∏ —Ç–æ–ø-3 –ª—é–±–∏–º—ã—Ö –∂–∞–Ω—Ä–∞.
    """
    # –¢–æ–ø-10 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
    db_cursor.execute("SELECT title, count FROM stats ORDER BY count DESC LIMIT 10")
    film_rows = db_cursor.fetchall()
    if film_rows:
        film_stats = "\n".join([f"{row[0]} - {row[1]} –ø—Ä–æ—Å–º–æ—Ç—Ä" + (row[1] < 5 and row[1] > 1) * "a" + (row[1] > 4) * "–æ–≤"  for row in film_rows])
    else:
        film_stats = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç–∞."

    # –¢–æ–ø-3 –ª—é–±–∏–º—ã—Ö –∂–∞–Ω—Ä–∞
    db_cursor.execute("""
        SELECT genres FROM movies 
        WHERE movie_id IN (
            SELECT movie_id FROM stats 
            ORDER BY count DESC 
            LIMIT 100  -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä–∫—É –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        )
    """)
    genre_rows = db_cursor.fetchall()

    genres = []
    for row in genre_rows:
        if row[0]:
            # –†–∞–∑–¥–µ–ª—è–µ–º –∂–∞–Ω—Ä—ã –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            genres.extend([genre.strip() for genre in row[0].split(",")])

    genre_counts = Counter(genres)
    top_genres = genre_counts.most_common(3)

    if top_genres:
        genre_stats = "\n".join([f"{genre} - {count} —Ä–∞–∑" + (count < 5 and count > 1)*"a" for genre, count in top_genres])
    else:
        genre_stats = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∞–Ω—Ä–æ–≤ –ø—É—Å—Ç–∞."

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    stats_message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å–º–æ–≤:\n{film_stats}\n\nüé® –¢–æ–ø-3 –ª—é–±–∏–º—ã—Ö –∂–∞–Ω—Ä–∞:\n{genre_stats}"
    await message.reply(stats_message)


@dp.message(F.content_type == types.ContentType.STICKER)
async def handle_sticker(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏.
    """
    # –î–æ—Å—Ç—É–ø –∫ —Å—Ç–∏–∫–µ—Ä—É: message.sticker
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply("–ü—Ä–∏–∫–æ–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä! üëç")


@dp.message()
async def search_movie(message: types.Message):
    """
    –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    """
    query = message.text.strip()
    user_id = message.from_user.id
    if not query:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_cursor.execute("INSERT INTO history (user_id, query) VALUES (?, ?)", (user_id, query))
    db_connection.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    db_cursor.execute("SELECT movie_ids FROM searches WHERE search_name = ?", (query,))
    row = db_cursor.fetchone()

    if row:
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º movie_ids
        movie_ids = json.loads(row[0])  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
        logging.info(f"–ó–∞–ø—Ä–æ—Å '{query}' –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ó–∞–≥—Ä—É–∂–µ–Ω—ã movie_ids: {movie_ids}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã movies
        movies = []
        for movie_id in movie_ids:
            db_cursor.execute("""
                SELECT movie_id, name, title, description, year, country, genres, poster, link, rating_industry, rating_people 
                FROM movies 
                WHERE movie_id = ?
            """, (movie_id,))
            movie = db_cursor.fetchone()
            if movie:
                movies.append({
                    "movie_id": movie[0],
                    "name": movie[1],
                    "title": movie[2],
                    "description": movie[3],
                    "year": movie[4],
                    "country": movie[5],
                    "genres": movie[6],
                    "poster": movie[7],
                    "link": movie[8],
                    "rating_industry": movie[9],
                    "rating_people": movie[10]
                })

    else:
        # –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ Kinopoisk API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        movies = await scrappers.search_kino_poisk(query)

        if not movies:
            await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            return

        if len(movies) == 1:
            movie = movies[0]
            text = format_movie_info(movie)
            film_ru_id = await scrappers.find_movie_in_filmru(movie['name'])
            poster_url = await scrappers.scrape_film_ru_poster(film_ru_id)
            logging.info(f"Poster URL in search: {poster_url}")
            db_cursor.execute("""
                INSERT OR REPLACE INTO movies (
                    poster
                ) VALUES (?)
            """, (poster_url,))
            if poster_url:
                await bot.send_photo(chat_id=message.chat.id, photo=poster_url, caption=text, parse_mode="Markdown")
            else:
                await message.reply(text, parse_mode="Markdown")
        else:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            text_for_choice = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π:\n"
            builder = InlineKeyboardBuilder()
            for i, movie in enumerate(movies):
                text_for_choice += f"{i + 1}. {movie['name']} ({movie['year']})\n"
                button_text = f"1. {movie['name']} ({movie['year']})"
                callback_data = f"sel_{movie['movie_id']}"
                builder.add(InlineKeyboardButton(text=button_text, callback_data=callback_data))

            keyboard = builder.as_markup()
            await message.reply(text_for_choice, reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("sel_"))
async def handle_movie_choice(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ.
    """
    try:
        movie_id = int(callback.data.split("_")[1])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_cursor.execute("""
        SELECT name, title, year, description, country, genres, poster, link, rating_industry, rating_people 
        FROM movies 
        WHERE movie_id = ?
    """, (movie_id,))
    result = db_cursor.fetchone()

    if not result:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    name, title, year, description_film, country, genres, poster, link, rating_industry, rating_people = result
    film_ru_id = await scrappers.find_movie_in_filmru(name)
    poster_url = await scrappers.scrape_film_ru_poster(film_ru_id)
    db_cursor.execute("""
        INSERT OR REPLACE INTO movies (
            poster
        ) VALUES (?)
    """, (poster_url,))

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    description_res = f"üé¨ *{name}* ({year})\n" \
                  f"üåê –°—Ç—Ä–∞–Ω–∞: {country}\n" \
                  f"üé• –ñ–∞–Ω—Ä—ã: {genres}\n" \
                  f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞: {rating_industry}/10\n" \
                  f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ IMDb: {rating_people}/10\n" \
                  f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description_film}\n\n" \
                  f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å]({link})"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    db_cursor.execute("""
        INSERT INTO stats (title, count) 
        VALUES (?, 1) 
        ON CONFLICT(title) DO UPDATE SET count = count + 1
    """, (f"{name} ({year})",))
    db_connection.commit()
    logging.info(f"Poster URL: {poster_url}")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    if poster_url:
        print(poster_url[-3:])
        if poster_url[-3:] == "jpg":
            try:
                await bot.send_photo(chat_id=callback.message.chat.id, photo=poster_url, caption=description_res, parse_mode="Markdown")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                await callback.message.reply(description_res, parse_mode="Markdown")
        else:
            await callback.message.reply("–≠—Ö, —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–µ —Ç–æ—Ç...\n–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º...")
            poster_path = await scrappers.download_image(poster_url, "poster.jpg")
            if poster_path:
                file_input = FSInputFile(poster_path)
                await bot.send_photo(chat_id=callback.message.chat.id, photo=file_input, caption=description_res, parse_mode="Markdown")
            else:
                await callback.message.reply(description_res, parse_mode="Markdown")
    else:
        await callback.message.reply(description_res, parse_mode="Markdown")

    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
